#!/bin/bash

# Script de configuration pour merger deux projets
# Usage: ./merge-setup.sh

echo "üöÄ Configuration du repository pour le merge de projets"
echo "=================================================="

# V√©rifier si nous sommes dans un repository Git
if [ ! -d ".git" ]; then
    echo "‚ùå Erreur: Ce n'est pas un repository Git"
    exit 1
fi

# Afficher l'√©tat actuel
echo "üìä √âtat actuel du repository:"
git status --short

# Cr√©er les branches pour le merge
echo ""
echo "üåø Cr√©ation des branches de travail..."

# Branche pour le projet A
if ! git show-ref --verify --quiet refs/heads/project-a; then
    git checkout -b project-a
    echo "‚úÖ Branche 'project-a' cr√©√©e"
    git checkout main
else
    echo "‚ÑπÔ∏è  Branche 'project-a' existe d√©j√†"
fi

# Branche pour le projet B
if ! git show-ref --verify --quiet refs/heads/project-b; then
    git checkout -b project-b
    echo "‚úÖ Branche 'project-b' cr√©√©e"
    git checkout main
else
    echo "‚ÑπÔ∏è  Branche 'project-b' existe d√©j√†"
fi

# Branche de travail pour le merge
if ! git show-ref --verify --quiet refs/heads/merge-branch; then
    git checkout -b merge-branch
    echo "‚úÖ Branche 'merge-branch' cr√©√©e"
    git checkout main
else
    echo "‚ÑπÔ∏è  Branche 'merge-branch' existe d√©j√†"
fi

echo ""
echo "üìã Branches disponibles:"
git branch -a

echo ""
echo "üìù Instructions pour le merge:"
echo "1. Placez le premier projet dans la branche 'project-a'"
echo "2. Placez le deuxi√®me projet dans la branche 'project-b'"
echo "3. Utilisez 'merge-branch' pour travailler sur l'int√©gration"
echo ""
echo "Commandes utiles:"
echo "  git checkout project-a    # Basculer vers le projet A"
echo "  git checkout project-b    # Basculer vers le projet B"
echo "  git checkout merge-branch # Basculer vers la branche de merge"
echo "  git merge project-a       # Merger le projet A (depuis merge-branch)"
echo "  git merge project-b       # Merger le projet B (depuis merge-branch)"

echo ""
echo "‚ú® Configuration termin√©e!"